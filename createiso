#!/bin/bash
set -x
if which apt &>/dev/null && [[ -d /var/lib/dpkg && -d /etc/apt ]] ; then
    apt-get update
    echo "işlem başladı....."
    apt install xorriso grub-pc-bin grub-efi mtools make python3 dosfstools e2fsprogs squashfs-tools python3-yaml gcc wget curl unzip xz-utils debootstrap git erofs-utils zstd -y
fi

apt-get install git devscripts equivs -y
#------------------------------------------------------------------------------------
rootfs="/root/distro/rootfs"
distro="/root/distro"
#rm -rf distro/iso
rm -rf $rootfs
mkdir -p /tmp/distro/rootfs
mkdir -p $rootfs/bin
#mkdir -p distro/rootfs
#export PATH=/bbin:$PATH
cp busybox $rootfs/bin/busybox
cd $rootfs/bin/
ln -s busybox cpio
#busybox --install -s ./
cd $rootfs/
#cd distro/rootfs/
mkdir  -p var run dev sys proc etc tmp/bps/kur
bash -c "echo '127.0.0.1 basitdagitim' >> $rootfs/etc/hosts"
bash -c "echo 'basitdagitim' > $rootfs/etc/hostname"
bash -c "echo 'nameserver 8.8.8.8' > $rootfs/etc/resolv.conf"

### system chroot  bind/mount
for i in dev dev/pts proc sys; do mount -o bind /$i $rootfs/$i; done
### manuel bps-tools install
$rootfs/bin/busybox wget -O $rootfs/tmp/base-file-1.0.bps https://github.com/basitdagitim/base-bps-binary-packages/raw/master/base-file/base-file-1.0.bps 1>$rootfs/dev/null 2>$rootfs/dev/null
$rootfs/bin/busybox tar -xf $rootfs/tmp/base-file-1.0.bps -C $rootfs/tmp/bps/kur
$rootfs/bin/busybox tar -xf $rootfs/tmp/bps/kur/rootfs.tar.xz -C $rootfs

#paket adresi ekleniyor
$rootfs/bin/busybox mkdir -p $rootfs/etc/bps
echo "basitdagitim/base-bps-binary-packages">$rootfs/etc/bps/sources.list
echo "basitdagitim/other-bps-binary-packages">>$rootfs/etc/bps/sources.list
echo "basitdagitim/bps-apps">>$rootfs/etc/bps/sources.list
echo "basitdagitim/x11-bps-binary-packages">>$rootfs/etc/bps/sources.list
echo "basitdagitim/lxde-bps-binary-packages">>$rootfs/etc/bps/sources.list
echo "basitdagitim/cinnamon-bps-binary-packages">>$rootfs/etc/bps/sources.list
echo "anadolulinux/lfs-binary-packages">>$rootfs/etc/bps/sources.list

### installing bps package in rootfs
$rootfs/bin/bps -u $rootfs
#**********************************************************************
echo root:x:0:0:root:/root:/bin/sh > $rootfs/etc/passwd 
chmod 755 $rootfs/etc/passwd
#**********************************************************************
#chroot $rootfs /bin/bps -i distro-core-base
$rootfs/bin/bps -ri glibc $rootfs
$rootfs/bin/bps -ri readline $rootfs
$rootfs/bin/bps -ri ncurses $rootfs
$rootfs/bin/bps -ri \bash $rootfs
$rootfs/bin/bps -ri openssl $rootfs
$rootfs/bin/bps -ri acl $rootfs
$rootfs/bin/bps -ri attr $rootfs
$rootfs/bin/bps -ri libcap $rootfs
$rootfs/bin/bps -ri gmp $rootfs
$rootfs/bin/bps -ri \grep $rootfs
$rootfs/bin/bps -ri \sed $rootfs
$rootfs/bin/bps -ri libpcre2 $rootfs
$rootfs/bin/bps -ri coreutils $rootfs
$rootfs/bin/bps -ri util-linux $rootfs
$rootfs/bin/bps -ri openrc $rootfs
#chroot $rootfs /bin/bps -i distro-base
#linux-headers linux-libc-dev libc6-dev libstdc++-dev
for paket in rsync kbd libpcre2 busybox \
		kernel live-boot live-config \
		parted dosfstools kmod grub \
		zstd  brotli expat libmd eudev findutils pam \
		e2fsprogs \gzip \gawk initramfs-tools zlib audit  \
		 xz-utils libxml2  libselinux nano
do
chroot $rootfs /bin/bps -i $paket; 
done
#chroot $rootfs /sbin/depmod --all --basedir=lib	#modüllerin indeks dosyası oluşturuluyor
#glib-> libffi 
#gtk3 ->glib gdk_pixbuf harfbuzz fontconfig
#update-mime-database-> gcc 
for paket in libffi fribidi freetype atkmm libepoxy glib fontconfig \gcc gdk-pixbuf harfbuzz shadow openbox gtk3 libjpeg-turbo dbus polkit elogind shared-mime-info
do
chroot $rootfs /bin/bps -i $paket;
done

chroot $rootfs /bin/bps -i x11-base-base
chroot $rootfs /bin/bps -i x11-driver-base
chroot $rootfs /bin/bps -i x11-libs-base
chroot $rootfs /bin/bps -i font-base
chroot $rootfs /bin/bps -i mesa
chroot $rootfs /bin/bps -i llvm
chroot $rootfs /bin/bps -i cinnamon-base
chroot $rootfs /bin/bps -i gobject-introspection
chroot $rootfs /bin/bps -i gstreamer
chroot $rootfs /bin/bps -i gsettings-desktop-schemas
chroot $rootfs /bin/bps -i py3-base
chroot $rootfs /bin/bps -i networkmanager
chroot $rootfs /bin/bps -i openssh

for paket in libvorbis libxcb libXau libXdmcp libXfont libXfont2 libfontenc freetype libxshmfence libdrm libpciaccess cinnamon-base libcanberra libogg tdb libexif cups libpulse libgnomekbd lcms2 libiconv exempi libdbusmenu networkmanager libnma nm-applet nspr libgcrypt py3-pygobject graphene pipewire vulkan-loader gsound libsoup2 timezonemap gnutls accountsservice colord libassuan e2fsprogs keyutils libkeybinder3 udisks2 gnome-keyring gnome-backgrounds gnome-terminal
do
chroot $rootfs /bin/bps -i $paket;
done

chroot $rootfs /bin/bps -i setxkbmap
chroot $rootfs /bin/bps -i xorg-xset
chroot $rootfs /bin/bps -i lightdm
chroot $rootfs /bin/bps -i lightdm-gtk-greeter
#hroot $rootfs /bin/bps -i lightdm-pardus-greeter
chroot $rootfs /bin/bps -i libgpg-error
chroot $rootfs /bin/bps -i live-installer

#dil ayarını en son yapıyoruz
chroot $rootfs /bin/bps -i locale-tr
chroot $rootfs /bin/install-remove-to-do

###live config işlemleri yapılıyor
#cd $rootfs/sbin
#rm init
#ln -s openrc-init init
#cd -
##Kurulum scripti
cp kur1 $rootfs/bin/kur1

chroot $rootfs useradd live -m -s /bin/sh  -d /home/live
chroot $rootfs echo -e "live\nlive\n"|chroot $rootfs passwd live

for grp in users tty wheel cdrom audio dip video plugdev netdev; do
    chroot $rootfs usermod -aG $grp live || true
done
chroot $rootfs echo -e "1\n1\n"|chroot $rootfs passwd root


### update-initrd
fname=$(basename $rootfs/boot/config*)
kversion=${fname:7}
mv $rootfs/boot/config* $rootfs/boot/config-$kversion
cp $rootfs/boot/config-$kversion $rootfs/etc/kernel-config

chroot $rootfs update-initramfs -u -k $kversion

#### system chroot umount
for dir in dev dev/pts proc sys ; do    while umount -lf -R $rootfs/$dir 2>/dev/null ; do true; done done

#************************iso *********************************
mkdir -p $distro/iso
mkdir -p $distro/iso/boot
mkdir -p $distro/iso/boot/grub
mkdir -p $distro/iso/live || true

#### Copy kernel and initramfs
cp -pf $rootfs/boot/initrd.img-* $distro/iso/boot/initrd.img
cp -pf $rootfs/boot/vmlinuz-* $distro/iso/boot/vmlinuz
rm -rf $rootfs/boot
#### Create squashfs
mksquashfs $rootfs $distro/filesystem.squashfs -comp xz -wildcards
mv $distro/filesystem.squashfs $distro/iso/live/filesystem.squashfs

#### Write grub.cfg


echo 'menuentry "Canli(live) GNU/Linux 64-bit" --class liveiso  {' > $distro/iso/boot/grub/grub.cfg
echo '    linux /boot/vmlinuz boot=live net.ifnames=0 biosdevname=0' >> $distro/iso/boot/grub/grub.cfg
echo '    initrd /boot/initrd.img' >> $distro/iso/boot/grub/grub.cfg
echo '}' >> $distro/iso/boot/grub/grub.cfg

echo 'menuentry "Kur iki Part GNU/Linux 64-bit" --class liveiso  {' >> $distro/iso/boot/grub/grub.cfg
echo '    linux /boot/vmlinuz boot=live init=/bin/kur2 ' >> $distro/iso/boot/grub/grub.cfg
echo '    initrd /boot/initrd.img' >> $distro/iso/boot/grub/grub.cfg
echo '}' >> $distro/iso/boot/grub/grub.cfg

echo 'menuentry "Kur Tek Part GNU/Linux 64-bit" --class liveiso  {' >> $distro/iso/boot/grub/grub.cfg
echo '    linux /boot/vmlinuz boot=live init=/bin/kur1 ' >> $distro/iso/boot/grub/grub.cfg
echo '    initrd /boot/initrd.img' >> $distro/iso/boot/grub/grub.cfg
echo '}' >> $distro/iso/boot/grub/grub.cfg

grub-mkrescue $distro/iso/ -o $distro/distro.iso

